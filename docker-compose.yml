networks:
  chat_network:
    driver: bridge

services:
  db:
    image: postgres:${POSTGRES_VERSION}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./chat_service/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    networks:
      - chat_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  chat_service:
    build:
      context: chat_service
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
    volumes:
      - ./chat_service:/app
    ports:
      - "${APP_PORT}:${APP_PORT}"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@db:${DB_PORT}/${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - REFRESH_SECRET_KEY=${REFRESH_SECRET_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chat_network
    command: >
      sh -c "
            until pg_isready -h db -p 5432 -U postgres; do echo 'Waiting for database...'; sleep 2; done;
            psql -U postgres -h db -d ${DB_NAME} -f /app/init.sql;
            uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
            "
  

  redis:
    image: redis:${REDIS_VERSION}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    command: redis-server
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - chat_network

volumes:
  postgres_data:
  redis_data:
