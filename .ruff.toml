# Ruff configuration file for Python linting and formatting
# See https://docs.astral.sh/ruff/configuration/

# Target Python version
target-version = "py311"

# Line length limit  
line-length = 88

# File and directory patterns to exclude
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations/",
    "alembic/",
]

[lint]
# Enable additional rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "TC",  # flake8-type-checking
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented-out code)
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

# Rules to ignore
ignore = [
    "E712",    # Comparing with == or != None (sometimes needed for SQLAlchemy)
    "E501",    # Line too long (handled by formatter)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "ARG002",  # Unused method argument (common in async frameworks)
    "TC001",   # Type checking imports (sometimes needed at runtime)
    "TC002",   # Type checking imports (sometimes needed at runtime)
    "TC003",   # Type checking imports (sometimes needed at runtime)
    "SIM108",  # Use ternary operator (not always more readable)
    "B008",    # Do not perform function calls in argument defaults (common with FastAPI)
]

# Allow unused variables when they start with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Rules that should be automatically fixed
fixable = [
    "I",    # isort
    "UP",   # pyupgrade  
    "F401", # Remove unused imports
    "F841", # Remove unused variables
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "ERA",  # eradicate
]

# Don't automatically fix these rules
unfixable = [
    "F401", # Don't remove imports that might be used by other tools
    "ERA001", # Don't remove commented-out code automatically
]

[lint.per-file-ignores]
# Test files can have additional flexibility
"**/test_*.py" = [
    "S101",    # Use of assert
    "ARG001",  # Unused function argument (fixtures)
    "PLR2004", # Magic values in tests are OK
    "S105",    # Hardcoded password string
    "S106",    # Hardcoded password function argument
]

# Configuration files
"**/conftest.py" = [
    "ARG001",  # Unused function argument (fixtures)
]

[lint.isort]
force-single-line = false
combine-as-imports = true
split-on-trailing-comma = true
known-first-party = ["app", "chat"]
known-third-party = [
    "fastapi", 
    "sqlalchemy", 
    "pydantic", 
    "pytest",
    "flet",
    "redis",
    "passlib",
    "python-jose",
    "alembic"
]

[lint.pyupgrade]
# Keep trailing commas for Python 3.11+
keep-runtime-typing = true

[lint.pylint]
# Maximum number of arguments for function/method
max-args = 10
# Maximum number of local variables
max-locals = 20
# Maximum number of return statements
max-returns = 8
# Maximum number of branches
max-branches = 15

[format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around indentation
indent-style = "space"
# Skip string normalization to preserve existing quotes when possible
skip-magic-trailing-comma = false
# Respect existing line endings
line-ending = "auto"